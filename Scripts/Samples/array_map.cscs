Why would someone want to write yet another programming language? And why in C#?It‘s often taken for granted that you need an advanced degree in Computer Science—or a lot of stubbornness—to write a compiler. In either case, you’d have quite a few sleepless nights and broken relationships as a result. This article will show you how to avoid all that.Here are a few advantages of writing your own language, like the one that I’ll show in this article:•	Unlike most other languages, it’s very easy to modify its functionality, because everything is in an easy-to-follow standard C# code with a clear interface for functions to be added. Any additional functions can be added to this language with just a few lines of code•	All of the keywords of this language (“if”, “else”, “while”, “function”, and so on) can be easily replaced by any non-English keywords (and they don’t have to be ASCII, contrary to the most other languages). Only configuration changes are needed for replacing the keywords•	This language can be used as both as a scripting language and as a shell program, like bash on Unix or PowerShell on Windows (but you will make it more user-friendly than PowerShell).•	Even Python doesn’t have the prefix and postfix operators “++” and “--“ with the killer argument: “you don’t need them.” With your own language, you can decide by yourself what you need. And I’ll show you how.•	Any custom parsing can be implemented on the fly. Having full control over parsing means less time searching for how to use an external package or a regex library.•	 You won’t be using any regular expressions at all! I believe that this is the main showstopper for a few people who desperately need to parse an expression but are averse to the pain and humiliation induced by the regex rules.